package DS.persistence;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;

import DS.objects.Item;

public class DataAccessObject implements DataAccess {
	private String dbName, dbType, cmdString, result;
	private int updateCount;
	
	private Statement st;
	private Connection cLocal;
	private ResultSet rs;
	
	public DataAccessObject(String dbName){
		this.dbName = dbName;
	}
	
	public void openLocal(String dbName){
		String url;
		try{
			dbType = "HSQL";
			Class.forName("org.hsqldb.jdbcDriver").newInstance();
			url = "jdbc:hsqldb:database/" + dbName;
			cLocal = DriverManager.getConnection(url, "SA", "");
			st = cLocal.createStatement();
		}
		catch(Exception e){
			processSQLError(e);
		}
		
		System.out.println("Opened " + dbType + " database " + dbName);
	}
	public void close(){
        try
        {
            cmdString = "shutdown compact";
            rs = st.executeQuery(cmdString);
            cLocal.close();
        }
        catch (Exception e)
        {
            processSQLError(e);
        }
        System.out.println("Closed " + dbType + " dbName " + dbName);
	}

	public ArrayList<Item> getPlayList() {
		ArrayList<Item> playList = new ArrayList<Item>();
		Item newItem = null;
		
		try{
			cmdString = "Select * from playlist";
			rs = st.executeQuery(cmdString);
			
			while(rs.next()){
				newItem = new Item(rs.getString("FilePath"), rs.getString("FileName"), 
						rs.getString("FileType"), rs.getInt("PlayTime"), rs.getInt("PlayOrder"), 
						rs.getInt("id"));
				playList.add(newItem);
			}
			rs.close();
		}
		catch(Exception e){
			processSQLError(e);
		}
		return playList;
	}

	public void deleteItem(int itemID) {
		try{
			cmdString = "Delete from playlist where ID=" + itemID;
			updateCount = st.executeUpdate(cmdString);
			checkWarning(st, updateCount);
		}
		catch(Exception e){
			result = processSQLError(e);
			System.out.println(result);
		}
		
		commitToDatabase();
	}
	public void emptyDB(){
	    	try{
	    		cmdString = "DROP TABLE PLAYLIST IF EXISTS";
	    		updateCount = st.executeUpdate(cmdString);
	    		cmdString = "CREATE MEMORY TABLE PLAYLIST(ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0) NOT NULL PRIMARY KEY,FILENAME VARCHAR(200) NOT NULL,FILEPATH VARCHAR(200) NOT NULL,FILETYPE VARCHAR(50) NOT NULL,PLAYORDER INTEGER NOT NULL,PLAYTIME INTEGER NOT NULL)";
	    		updateCount = st.executeUpdate(cmdString);
	    	} catch(Exception e){
	    		result = processSQLError(e);
				System.out.println(result);
	    	}
    	}
	public void update(int itemID1, int pos1, int itemID2, int pos2){
		try{
			cmdString = "Update playlist set playOrder=" + pos1 + " where id=" +itemID1;
			updateCount = st.executeUpdate(cmdString);
			checkWarning(st, updateCount);
			cmdString = "Update playlist set playOrder=" + pos2 + " where id=" + itemID2;
			updateCount = st.executeUpdate(cmdString);
			checkWarning(st, updateCount);
		}catch(Exception e){
			result = processSQLError(e);
			System.out.println(result);
		}
	}
	public void addItem(String filePath, String fileName, String fileType, int playTime, int order) {
		fileName = fileName.replace("'", "''");
		filePath = filePath.replace("'", "''");
		try{
			cmdString = "Insert into PlayList(fileName, filePath, fileType, playOrder, playTime) values('";
			cmdString += fileName + "', '" + filePath + "', '" + fileType + "', " + order + ", " + playTime + ")";
			updateCount = st.executeUpdate(cmdString);
			checkWarning(st, updateCount);
		}catch(Exception e){
			result = processSQLError(e);
			System.out.println(result);
		}
		commitToDatabase();
	}
	
    public void commitToDatabase(){

        try{
            cLocal.commit();
        }
        catch (Exception e){
            result = processSQLError(e);
            
            System.out.println(result);
        }
    }
    
	public void checkWarning(Statement st, int updateCount){
        String result;
        try{
            SQLWarning warning = st.getWarnings();
            if (warning != null){
                result = warning.getMessage();
                System.out.println(result);
            }
        }
        catch (Exception e){
            result = processSQLError(e);
            System.out.println(result);
        }
        if (updateCount != 1){
            result = "Tuple not inserted correctly.";
            System.out.println(result);
        }
    }
    public String processSQLError(Exception e){
        String result;
        result = "*** SQL Error: " + e.getMessage();
        System.out.println(result);
        return result;
    }
}
